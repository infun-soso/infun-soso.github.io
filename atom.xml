<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Infun&#39;s Blog</title>
  
  <subtitle>no pain , no gain</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://infunsoso.top/"/>
  <updated>2018-01-22T07:38:39.646Z</updated>
  <id>http://infunsoso.top/</id>
  
  <author>
    <name>Infun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对于js中原型与原型链的理解</title>
    <link href="http://infunsoso.top/2018/01/22/prototype/"/>
    <id>http://infunsoso.top/2018/01/22/prototype/</id>
    <published>2018-01-22T06:21:10.000Z</published>
    <updated>2018-01-22T07:38:39.646Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/314601.jpg" width="100%"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在JavaScript中，原型也是一个对象，通过原型可以实现对象的属性继承，JavaScript的对象中都包含了一个”[[Prototype]]”内部属性，这个属性所对应的就是该对象的原型。<br>“[[Prototype]]”作为对象的内部属性，是不能被直接访问的。所以为了方便查看一个对象的原型，Firefox和Chrome中提供了<strong>proto</strong>这个非标准（不是所有浏览器都支持）的访问器（ECMA引入了标准对象原型访问器”Object.getPrototype(object)”）。在JavaScript的原型对象中，还包含一个”constructor”属性，这个属性对应创建所有指向该原型的实例的构造函数<br><a id="more"></a></p><h3 id="普通对象与函数对象"><a href="#普通对象与函数对象" class="headerlink" title="普通对象与函数对象"></a>普通对象与函数对象</h3><p>JavaScript 中，万物皆对象！但对象也是有区别的。分为普通对象和函数对象，Object 、Function 是 JS 自带的函数对象。下面举例说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var o1 = &#123;&#125;; </span><br><span class="line">var o2 =new Object();</span><br><span class="line">var o3 = new f1();</span><br><span class="line"></span><br><span class="line">function f1()&#123;&#125;; </span><br><span class="line">var f2 = function()&#123;&#125;;</span><br><span class="line">var f3 = new Function(&apos;str&apos;,&apos;console.log(str)&apos;);</span><br><span class="line"></span><br><span class="line">console.log(typeof Object); //function </span><br><span class="line">console.log(typeof Function); //function  </span><br><span class="line"></span><br><span class="line">console.log(typeof f1); //function </span><br><span class="line">console.log(typeof f2); //function </span><br><span class="line">console.log(typeof f3); //function   </span><br><span class="line"></span><br><span class="line">console.log(typeof o1); //object </span><br><span class="line">console.log(typeof o2); //object </span><br><span class="line">console.log(typeof o3); //object</span><br></pre></td></tr></table></figure></p><p>注意：Function Object 也都是通过 New Function()创建的。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p><strong>实例的构造函数属性（constructor）是一个指针，它指向构造函数。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age, job) &#123;</span><br><span class="line"> this.name = name;</span><br><span class="line"> this.age = age;</span><br><span class="line"> this.job = job;</span><br><span class="line"> this.sayName = function() &#123; alert(this.name) &#125; </span><br><span class="line">&#125;</span><br><span class="line">var person1 = new Person(&apos;Zaxlct&apos;, 28, &apos;Software Engineer&apos;);</span><br><span class="line">var person2 = new Person(&apos;Mick&apos;, 23, &apos;Doctor&apos;);</span><br></pre></td></tr></table></figure><p>即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person1.constructor = Person</span><br><span class="line">person2.constructor = Person</span><br></pre></td></tr></table></figure></p><h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><p>在javaScript中，每当定义一个对象（函数也是对象）的时候，对象中都会包含一些预定的属性，其中每个<strong>函数对象</strong>都有一个==prototype==属性，这个属性指向函数的原型对象，（先不用管什么是<strong>proto</strong>后面会详细的剖析）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;&#125;</span><br><span class="line">Person.prototype.name = &apos;Zaxlct&apos;;</span><br><span class="line">Person.prototype.age  = 28;</span><br><span class="line">Person.prototype.job  = &apos;Software Engineer&apos;;</span><br><span class="line">Person.prototype.sayName = function() &#123;</span><br><span class="line">  alert(this.name);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">var person1 = new Person();</span><br><span class="line">person1.sayName(); // &apos;Zaxlct&apos;</span><br><span class="line"></span><br><span class="line">var person2 = new Person();</span><br><span class="line">person2.sayName(); // &apos;Zaxlct&apos;</span><br><span class="line"></span><br><span class="line">console.log(person1.sayName == person2.sayName); //true</span><br></pre></td></tr></table></figure><blockquote><p>每个对象都有<strong>proto</strong>属性，但只有函数对象有prototype属性</p></blockquote><p>那什么是<strong>原型对象</strong>呢？<br>我们把上面的例子改一改，你就会明白了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype = &#123;</span><br><span class="line">   name:  &apos;Zaxlct&apos;,</span><br><span class="line">   age: 28,</span><br><span class="line">   job: &apos;Software Engineer&apos;,</span><br><span class="line">   sayName: function() &#123;</span><br><span class="line">     alert(this.name);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原型对象，顾名思义，他就是一个普通对象。从现在开始你要牢牢记住原型对象就是Person.prototype，如果你还是害怕它，那就把它想成一个字母A：var A = Person.prototype</p><p>在上面我给A添加了四个属性:name age job sayName。其实它还有一个默认的属性:constructor</p><blockquote><p>在默认情况下，所有的原型对象都会自动获得一个constructor（构造函数）属性，这个属性（是一个指针）指向prototype属性所在的函数(Person)</p></blockquote><p>上面这句话有点拗口，我们翻译一下：A有一个默认的constructor属性，这个属性是一个指针，指向Person。即：</p><p>==Person.prototype.constructor == Person==</p><p>在上面构造函数里，我们知道实例的构造函数属性指向构造函数</p><p>==person1.constructor == Person==</p><p>这两个公式好像有点联系：</p><blockquote><p>person1.constructor == Person</p><p>Person.prototype.constructor == Person</p></blockquote><p>person1 为什么有 constructor 属性？那是因为 person1 是 Person 的实例。<br>那 Person.prototype 为什么有 constructor 属性？？同理， Person.prototype （你把它想象成 A） 也是Person 的实例。<br>也就是在 Person 创建的时候，创建了一个它的实例对象并赋值给它的 prototype，基本过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var A = new Person()</span><br><span class="line">Person.prototype = A</span><br></pre></td></tr></table></figure><p><strong>在对象被创建时，会产生一个新的对象Person.prototype，实例并没有constructor属性，所谓的person1.constructor其实是访问Person.prototype的constructor属性，都指向构造器本身。</strong></p><h3 id="proto"><a href="#proto" class="headerlink" title="proto "></a><strong>proto </strong></h3><p>JS 在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做<strong>proto</strong> 的内置属性，用于指向创建它的构造函数的原型对象。<br>对象 person1 有一个 <strong>proto</strong>属性，创建它的构造函数是 Person，构造函数的原型对象是 Person.prototype ，所以：<br>person1.proto== Person.prototype</p><blockquote><p>不过，要明确的真正重要的一点就是，这个连接存在于实例（person1）与构造函数（Person）的原型对象（Person.prototype）之间，而不是存在于实例（person1）与构造函数（Person）之间。</p></blockquote><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>我们可以这样创建一个对象</p><p>var obj = {}</p><p>等同于</p><p>var obj = new Object()</p><p>obj是构造函数Object的一个实例，所以：</p><p>obj.constructor = Object</p><p>obj.<strong>proto</strong> = Object.prototype</p><p>同理，可以创建对象的构造器不仅仅有Object，也可以是Array，Date，Function等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var b = new Array();</span><br><span class="line">b.constructor === Array;</span><br><span class="line">b.__proto__ === Array.prototype;</span><br><span class="line"></span><br><span class="line">var c = new Date(); </span><br><span class="line">c.constructor === Date;</span><br><span class="line">c.__proto__ === Date.prototype;</span><br><span class="line"></span><br><span class="line">var d = new Function();</span><br><span class="line">d.constructor === Function;</span><br><span class="line">d.__proto__ === Function.prototype;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>所有函数对象的proto都指向Function.prototype，他是一个空函数</li><li>类似Array.prototype一般为普通对象(Array.prototype.proto == Object.prototype)，但是Function.prototype为函数对象</li><li>Function.prototype.proto == Object.prototype</li><li>Object.prototype.proto == null 顶层</li><li>console.log(Array.prototype) 空数组</li><li>函数对象的constructor指向函数本身</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/314601.jpg&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在JavaScript中，原型也是一个对象，通过原型可以实现对象的属性继承，JavaScript的对象中都包含了一个”[[Prototype]]”内部属性，这个属性所对应的就是该对象的原型。&lt;br&gt;“[[Prototype]]”作为对象的内部属性，是不能被直接访问的。所以为了方便查看一个对象的原型，Firefox和Chrome中提供了&lt;strong&gt;proto&lt;/strong&gt;这个非标准（不是所有浏览器都支持）的访问器（ECMA引入了标准对象原型访问器”Object.getPrototype(object)”）。在JavaScript的原型对象中，还包含一个”constructor”属性，这个属性对应创建所有指向该原型的实例的构造函数&lt;br&gt;
    
    </summary>
    
      <category term="Js相关" scheme="http://infunsoso.top/categories/Js%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="prototype" scheme="http://infunsoso.top/tags/prototype/"/>
    
      <category term="原型链，原型" scheme="http://infunsoso.top/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE%EF%BC%8C%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>谈谈Promise</title>
    <link href="http://infunsoso.top/2017/12/21/promise/"/>
    <id>http://infunsoso.top/2017/12/21/promise/</id>
    <published>2017-12-21T06:21:10.000Z</published>
    <updated>2017-12-21T09:11:39.706Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/promise.png" width="100%"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>所谓Promise，简单说就是一个容器(对象)，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p><p>接触过promise的的都知道它的应用场景和用途，Promise可以用来避免异步操作函数里的嵌套回调（callback hell）问题，因为解决异步最直接的方法是回调嵌套，将后一个的操作放在前一个操作的异步回调里，但如果操作多了，就会有很多层的嵌套(<strong>回调地狱</strong>)。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">    //做一些异步操作</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        console.log(&apos;执行完成&apos;);</span><br><span class="line">        resolve(&apos;随便什么数据&apos;);</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise的构造函数接收一个参数，是函数，并且传入两个参数：resolve，reject，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数。其实这里用“成功”和“失败”来描述并不准确，按照标准来讲，resolve是将Promise的状态置为fullfiled，reject是将Promise的状态置为rejected。不过在我们开始阶段可以先这么理解，后面再细究概念。</p><p>在上面的代码中，我们执行了一个异步操作，也就是setTimeout，2秒后，输出“执行完成”，并且调用resolve方法。</p><p>运行代码，会在2秒后输出“执行完成”。注意！我只是new了一个对象，并没有调用它，我们传进去的函数就已经执行了，这是需要注意的一个细节。所以我们用Promise的时候一般是包在一个函数中，在需要的时候去运行这个函数，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function runAsync()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(&apos;执行完成&apos;);</span><br><span class="line">            resolve(&apos;随便什么数据&apos;);</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;            </span><br><span class="line">&#125;</span><br><span class="line">runAsync()</span><br></pre></td></tr></table></figure></p><p>这时候你应该有两个疑问：1.包装这么一个函数有什么用？2.resolve(‘随便什么数据’);这是什么的？</p><p>我们继续来讲。在我们包装好的函数最后，会return出Promise对象，也就是说，执行这个函数我们得到了一个Promise对象。还记得Promise对象上有then、catch方法吧？这就是强大之处了，看下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">runAsync().then(function(data)&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">    //后面可以用传过来的数据做些其他操作</span><br><span class="line">    //......</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在runAsync()的返回上直接调用then方法，then接收一个参数，是函数，并且会拿到我们在runAsync中调用resolve时传的的参数。运行这段代码，会在2秒后输出“执行完成”，紧接着输出“随便什么数据”。</p><p>这时候你应该有所领悟了，原来then里面的函数就跟我们平时的回调函数一个意思，能够在runAsync这个异步任务执行完成之后被执行。这就是Promise的作用了，简单来讲，就是能把原来的回调写法分离出来，在异步操作执行完后，用链式调用的方式执行回调函数。</p><p>你可能会不屑一顾，Promise就这点能耐？我把回调函数封装一下，给runAsync传进去不也一样吗，就像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function runAsync(callback)&#123;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        console.log(&apos;执行完成&apos;);</span><br><span class="line">        callback(&apos;随便什么数据&apos;);</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runAsync(function(data)&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果也是一样的，还费劲用Promise干嘛。那么问题来了，有多层回调该怎么办？如果callback也是一个异步操作，而且执行完后也需要有相应的回调函数，该怎么办呢？总不能再定义一个callback2，然后给callback传进去吧。而Promise的优势在于，可以在then方法中继续写Promise对象并返回，然后继续调用then来进行回调操作。</p><h3 id="链式操作的用法"><a href="#链式操作的用法" class="headerlink" title="链式操作的用法"></a>链式操作的用法</h3><p>所以，从表面上看，Promise只是能够简化层层回调的写法，而实质上，Promise的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递callback函数要简单、灵活的多。所以使用Promise的正确场景是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">runAsync1()</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">    return runAsync2();</span><br><span class="line">&#125;)</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">    return runAsync3();</span><br><span class="line">&#125;)</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>runAsync1、runAsync2、runAsync3定义如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function runAsync1()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(&apos;异步任务1执行完成&apos;);</span><br><span class="line">            resolve(&apos;随便什么数据1&apos;);</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;            </span><br><span class="line">&#125;</span><br><span class="line">function runAsync2()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(&apos;异步任务2执行完成&apos;);</span><br><span class="line">            resolve(&apos;随便什么数据2&apos;);</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;            </span><br><span class="line">&#125;</span><br><span class="line">function runAsync3()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(&apos;异步任务3执行完成&apos;);</span><br><span class="line">            resolve(&apos;随便什么数据3&apos;);</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了，比如我们把上面的代码修改成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">runAsync1()</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">    return runAsync2();</span><br><span class="line">&#125;)</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">    return &apos;直接返回数据&apos;;  //这里直接返回数据</span><br><span class="line">&#125;)</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>那么输出就变成了这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">异步任务1执行完成</span><br><span class="line">随便什么数据1</span><br><span class="line">异步任务2执行完成</span><br><span class="line">随便什么数据2</span><br><span class="line">直接返回数据</span><br></pre></td></tr></table></figure></p><h3 id="reject的用法"><a href="#reject的用法" class="headerlink" title="reject的用法"></a>reject的用法</h3><p>到这里，你应该对“Promise是什么”有了最基本的了解。那么我们接着来看看ES6的Promise还有哪些功能。我们光用了resolve，还没用reject呢，它是做什么的呢？事实上，我们前面的例子都是只有“执行成功”的回调，还没有“失败”的情况，reject的作用就是把Promise的状态置为rejected，这样我们在then中就能捕捉到，然后执行“失败”情况的回调。看下面的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function getNumber()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            var num = Math.ceil(Math.random()*10); //生成1-10的随机数</span><br><span class="line">            if(num&lt;=5)&#123;</span><br><span class="line">                resolve(num);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                reject(&apos;数字太大了&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getNumber()</span><br><span class="line">.then(</span><br><span class="line">    function(data)&#123;</span><br><span class="line">        console.log(&apos;resolved&apos;);</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;, </span><br><span class="line">    function(reason, data)&#123;</span><br><span class="line">        console.log(&apos;rejected&apos;);</span><br><span class="line">        console.log(reason);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>getNumber函数用来异步获取一个数字，2秒后执行完成，如果数字小于等于5，我们认为是“成功”了，调用resolve修改Promise的状态。否则我们认为是“失败”了，调用reject并传递一个参数，作为失败的原因。</p><p>运行getNumber并且在then中传了两个参数，then方法可以接受两个参数，第一个对应resolve的回调，第二个对应reject的回调。所以我们能够分别拿到他们传过来的数据。多次运行这段代码，你会随机得到下面两种结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resolved</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reject</span><br><span class="line">数字太大了</span><br></pre></td></tr></table></figure></p><h3 id="catch的用法"><a href="#catch的用法" class="headerlink" title="catch的用法"></a>catch的用法</h3><p>我们知道Promise对象除了then方法，还有一个catch方法，它是做什么用的呢？其实它和then的第二个参数一样，用来指定reject的回调，用法是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getNumber()</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">    console.log(&apos;resolved&apos;);</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function(reason)&#123;</span><br><span class="line">    console.log(&apos;rejected&apos;);</span><br><span class="line">    console.log(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中。请看下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getNumber()</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">    console.log(&apos;resolved&apos;);</span><br><span class="line">    console.log(data);</span><br><span class="line">    console.log(somedata); //此处的somedata未定义</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function(reason)&#123;</span><br><span class="line">    console.log(&apos;rejected&apos;);</span><br><span class="line">    console.log(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在resolve的回调中，我们console.log(somedata);而somedata这个变量是没有被定义的。如果我们不用Promise，代码运行到这里就直接在控制台报错了，不往下运行了。但是在这里，会得到这样的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resolved</span><br><span class="line">4</span><br><span class="line">rejected</span><br><span class="line">ReferenceError: somedata is not defined(...)</span><br></pre></td></tr></table></figure></p><p>也就是说进到catch方法里面去了，而且把错误原因传到了reason参数中。即便是有错误的代码也不会报错了，这与我们的try/catch语句有相同的功能。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ES6 Promise的内容还有很多。all, race 的用法，常用的就是这些。<br><strong>all</strong>: Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。我们仍旧使用上面定义好的runAsync1、runAsync2、runAsync3这三个函数。<br><strong>race</strong>: all方法的效果实际上是「谁跑的慢，以谁为准执行回调」，那么相对的就有另一个方法「谁跑的快，以谁为准执行回调」，这就是race方法，这个词本来就是赛跑的意思。<br>还有一些done、finally、success、fail等，这些并不在Promise标准中，而是我们自己实现的语法糖。</p><p>happy hacking!</p><p><br></p><p><br><br><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/promise.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;所谓Promise，简单说就是一个容器(对象)，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。&lt;/p&gt;
&lt;p&gt;接触过promise的的都知道它的应用场景和用途，Promise可以用来避免异步操作函数里的嵌套回调（callback hell）问题，因为解决异步最直接的方法是回调嵌套，将后一个的操作放在前一个操作的异步回调里，但如果操作多了，就会有很多层的嵌套(&lt;strong&gt;回调地狱&lt;/strong&gt;)。&lt;/p&gt;
    
    </summary>
    
      <category term="Js相关" scheme="http://infunsoso.top/categories/Js%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="promise" scheme="http://infunsoso.top/tags/promise/"/>
    
      <category term="异步" scheme="http://infunsoso.top/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://infunsoso.top/2017/12/12/my-first-post/"/>
    <id>http://infunsoso.top/2017/12/12/my-first-post/</id>
    <published>2017-12-12T04:57:45.000Z</published>
    <updated>2017-12-21T07:19:06.368Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/city.jpg" width="100%"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是我的第一篇博客，HEXO真的很强大，<br>有很多很多实用的功能，接下来要继续拓展和完善一些功能，<br>Happy Hacking！</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/city.jpg&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这是我的第一篇博客，HEXO真的很强大，&lt;br&gt;有很多很多实用的功能，接下来要继续拓展和完善一些功能，&lt;br&gt;Happy Hacking！&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://infunsoso.top/categories/blog/"/>
    
    
      <category term="城市" scheme="http://infunsoso.top/tags/%E5%9F%8E%E5%B8%82/"/>
    
  </entry>
  
</feed>
