<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[对于js中原型与原型链的理解]]></title>
    <url>%2F2018%2F01%2F22%2Fprototype%2F</url>
    <content type="text"><![CDATA[前言在JavaScript中，原型也是一个对象，通过原型可以实现对象的属性继承，JavaScript的对象中都包含了一个”[[Prototype]]”内部属性，这个属性所对应的就是该对象的原型。“[[Prototype]]”作为对象的内部属性，是不能被直接访问的。所以为了方便查看一个对象的原型，Firefox和Chrome中提供了proto这个非标准（不是所有浏览器都支持）的访问器（ECMA引入了标准对象原型访问器”Object.getPrototype(object)”）。在JavaScript的原型对象中，还包含一个”constructor”属性，这个属性对应创建所有指向该原型的实例的构造函数 普通对象与函数对象JavaScript 中，万物皆对象！但对象也是有区别的。分为普通对象和函数对象，Object 、Function 是 JS 自带的函数对象。下面举例说明123456789101112131415161718var o1 = &#123;&#125;; var o2 =new Object();var o3 = new f1();function f1()&#123;&#125;; var f2 = function()&#123;&#125;;var f3 = new Function(&apos;str&apos;,&apos;console.log(str)&apos;);console.log(typeof Object); //function console.log(typeof Function); //function console.log(typeof f1); //function console.log(typeof f2); //function console.log(typeof f3); //function console.log(typeof o1); //object console.log(typeof o2); //object console.log(typeof o3); //object 注意：Function Object 也都是通过 New Function()创建的。 构造函数实例的构造函数属性（constructor）是一个指针，它指向构造函数。 12345678function Person(name, age, job) &#123; this.name = name; this.age = age; this.job = job; this.sayName = function() &#123; alert(this.name) &#125; &#125;var person1 = new Person(&apos;Zaxlct&apos;, 28, &apos;Software Engineer&apos;);var person2 = new Person(&apos;Mick&apos;, 23, &apos;Doctor&apos;); 即12person1.constructor = Personperson2.constructor = Person 原型对象在javaScript中，每当定义一个对象（函数也是对象）的时候，对象中都会包含一些预定的属性，其中每个函数对象都有一个==prototype==属性，这个属性指向函数的原型对象，（先不用管什么是proto后面会详细的剖析） 123456789101112131415function Person() &#123;&#125;Person.prototype.name = &apos;Zaxlct&apos;;Person.prototype.age = 28;Person.prototype.job = &apos;Software Engineer&apos;;Person.prototype.sayName = function() &#123; alert(this.name);&#125; var person1 = new Person();person1.sayName(); // &apos;Zaxlct&apos;var person2 = new Person();person2.sayName(); // &apos;Zaxlct&apos;console.log(person1.sayName == person2.sayName); //true 每个对象都有proto属性，但只有函数对象有prototype属性 那什么是原型对象呢？我们把上面的例子改一改，你就会明白了： 12345678Person.prototype = &#123; name: &apos;Zaxlct&apos;, age: 28, job: &apos;Software Engineer&apos;, sayName: function() &#123; alert(this.name); &#125;&#125; 原型对象，顾名思义，他就是一个普通对象。从现在开始你要牢牢记住原型对象就是Person.prototype，如果你还是害怕它，那就把它想成一个字母A：var A = Person.prototype 在上面我给A添加了四个属性:name age job sayName。其实它还有一个默认的属性:constructor 在默认情况下，所有的原型对象都会自动获得一个constructor（构造函数）属性，这个属性（是一个指针）指向prototype属性所在的函数(Person) 上面这句话有点拗口，我们翻译一下：A有一个默认的constructor属性，这个属性是一个指针，指向Person。即： ==Person.prototype.constructor == Person== 在上面构造函数里，我们知道实例的构造函数属性指向构造函数 ==person1.constructor == Person== 这两个公式好像有点联系： person1.constructor == Person Person.prototype.constructor == Person person1 为什么有 constructor 属性？那是因为 person1 是 Person 的实例。那 Person.prototype 为什么有 constructor 属性？？同理， Person.prototype （你把它想象成 A） 也是Person 的实例。也就是在 Person 创建的时候，创建了一个它的实例对象并赋值给它的 prototype，基本过程如下： 12var A = new Person()Person.prototype = A 在对象被创建时，会产生一个新的对象Person.prototype，实例并没有constructor属性，所谓的person1.constructor其实是访问Person.prototype的constructor属性，都指向构造器本身。 proto JS 在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做proto 的内置属性，用于指向创建它的构造函数的原型对象。对象 person1 有一个 proto属性，创建它的构造函数是 Person，构造函数的原型对象是 Person.prototype ，所以：person1.proto== Person.prototype 不过，要明确的真正重要的一点就是，这个连接存在于实例（person1）与构造函数（Person）的原型对象（Person.prototype）之间，而不是存在于实例（person1）与构造函数（Person）之间。 构造器我们可以这样创建一个对象 var obj = {} 等同于 var obj = new Object() obj是构造函数Object的一个实例，所以： obj.constructor = Object obj.proto = Object.prototype 同理，可以创建对象的构造器不仅仅有Object，也可以是Array，Date，Function等1234567891011var b = new Array();b.constructor === Array;b.__proto__ === Array.prototype;var c = new Date(); c.constructor === Date;c.__proto__ === Date.prototype;var d = new Function();d.constructor === Function;d.__proto__ === Function.prototype; 总结 所有函数对象的proto都指向Function.prototype，他是一个空函数 类似Array.prototype一般为普通对象(Array.prototype.proto == Object.prototype)，但是Function.prototype为函数对象 Function.prototype.proto == Object.prototype Object.prototype.proto == null 顶层 console.log(Array.prototype) 空数组 函数对象的constructor指向函数本身]]></content>
      <categories>
        <category>Js相关</category>
      </categories>
      <tags>
        <tag>prototype</tag>
        <tag>原型链，原型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[谈谈Promise]]></title>
    <url>%2F2017%2F12%2F21%2Fpromise%2F</url>
    <content type="text"><![CDATA[前言所谓Promise，简单说就是一个容器(对象)，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。 接触过promise的的都知道它的应用场景和用途，Promise可以用来避免异步操作函数里的嵌套回调（callback hell）问题，因为解决异步最直接的方法是回调嵌套，将后一个的操作放在前一个操作的异步回调里，但如果操作多了，就会有很多层的嵌套(回调地狱)。 1234567var p = new Promise(function(resolve, reject)&#123; //做一些异步操作 setTimeout(function()&#123; console.log(&apos;执行完成&apos;); resolve(&apos;随便什么数据&apos;); &#125;, 2000);&#125;); Promise的构造函数接收一个参数，是函数，并且传入两个参数：resolve，reject，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数。其实这里用“成功”和“失败”来描述并不准确，按照标准来讲，resolve是将Promise的状态置为fullfiled，reject是将Promise的状态置为rejected。不过在我们开始阶段可以先这么理解，后面再细究概念。 在上面的代码中，我们执行了一个异步操作，也就是setTimeout，2秒后，输出“执行完成”，并且调用resolve方法。 运行代码，会在2秒后输出“执行完成”。注意！我只是new了一个对象，并没有调用它，我们传进去的函数就已经执行了，这是需要注意的一个细节。所以我们用Promise的时候一般是包在一个函数中，在需要的时候去运行这个函数，如：1234567891011function runAsync()&#123; var p = new Promise(function(resolve, reject)&#123; //做一些异步操作 setTimeout(function()&#123; console.log(&apos;执行完成&apos;); resolve(&apos;随便什么数据&apos;); &#125;, 2000); &#125;); return p; &#125;runAsync() 这时候你应该有两个疑问：1.包装这么一个函数有什么用？2.resolve(‘随便什么数据’);这是什么的？ 我们继续来讲。在我们包装好的函数最后，会return出Promise对象，也就是说，执行这个函数我们得到了一个Promise对象。还记得Promise对象上有then、catch方法吧？这就是强大之处了，看下面的代码：12345runAsync().then(function(data)&#123; console.log(data); //后面可以用传过来的数据做些其他操作 //......&#125;); 在runAsync()的返回上直接调用then方法，then接收一个参数，是函数，并且会拿到我们在runAsync中调用resolve时传的的参数。运行这段代码，会在2秒后输出“执行完成”，紧接着输出“随便什么数据”。 这时候你应该有所领悟了，原来then里面的函数就跟我们平时的回调函数一个意思，能够在runAsync这个异步任务执行完成之后被执行。这就是Promise的作用了，简单来讲，就是能把原来的回调写法分离出来，在异步操作执行完后，用链式调用的方式执行回调函数。 你可能会不屑一顾，Promise就这点能耐？我把回调函数封装一下，给runAsync传进去不也一样吗，就像这样： 12345678910function runAsync(callback)&#123; setTimeout(function()&#123; console.log(&apos;执行完成&apos;); callback(&apos;随便什么数据&apos;); &#125;, 2000);&#125;runAsync(function(data)&#123; console.log(data);&#125;); 效果也是一样的，还费劲用Promise干嘛。那么问题来了，有多层回调该怎么办？如果callback也是一个异步操作，而且执行完后也需要有相应的回调函数，该怎么办呢？总不能再定义一个callback2，然后给callback传进去吧。而Promise的优势在于，可以在then方法中继续写Promise对象并返回，然后继续调用then来进行回调操作。 链式操作的用法所以，从表面上看，Promise只是能够简化层层回调的写法，而实质上，Promise的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递callback函数要简单、灵活的多。所以使用Promise的正确场景是这样的： 123456789101112runAsync1().then(function(data)&#123; console.log(data); return runAsync2();&#125;).then(function(data)&#123; console.log(data); return runAsync3();&#125;).then(function(data)&#123; console.log(data);&#125;); runAsync1、runAsync2、runAsync3定义如下123456789101112131415161718192021222324252627282930function runAsync1()&#123; var p = new Promise(function(resolve, reject)&#123; //做一些异步操作 setTimeout(function()&#123; console.log(&apos;异步任务1执行完成&apos;); resolve(&apos;随便什么数据1&apos;); &#125;, 1000); &#125;); return p; &#125;function runAsync2()&#123; var p = new Promise(function(resolve, reject)&#123; //做一些异步操作 setTimeout(function()&#123; console.log(&apos;异步任务2执行完成&apos;); resolve(&apos;随便什么数据2&apos;); &#125;, 2000); &#125;); return p; &#125;function runAsync3()&#123; var p = new Promise(function(resolve, reject)&#123; //做一些异步操作 setTimeout(function()&#123; console.log(&apos;异步任务3执行完成&apos;); resolve(&apos;随便什么数据3&apos;); &#125;, 2000); &#125;); return p; &#125; 在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了，比如我们把上面的代码修改成这样： 123456789101112runAsync1().then(function(data)&#123; console.log(data); return runAsync2();&#125;).then(function(data)&#123; console.log(data); return &apos;直接返回数据&apos;; //这里直接返回数据&#125;).then(function(data)&#123; console.log(data);&#125;); 那么输出就变成了这样：12345异步任务1执行完成随便什么数据1异步任务2执行完成随便什么数据2直接返回数据 reject的用法到这里，你应该对“Promise是什么”有了最基本的了解。那么我们接着来看看ES6的Promise还有哪些功能。我们光用了resolve，还没用reject呢，它是做什么的呢？事实上，我们前面的例子都是只有“执行成功”的回调，还没有“失败”的情况，reject的作用就是把Promise的状态置为rejected，这样我们在then中就能捕捉到，然后执行“失败”情况的回调。看下面的代码。 123456789101112131415161718192021222324252627function getNumber()&#123; var p = new Promise(function(resolve, reject)&#123; //做一些异步操作 setTimeout(function()&#123; var num = Math.ceil(Math.random()*10); //生成1-10的随机数 if(num&lt;=5)&#123; resolve(num); &#125; else&#123; reject(&apos;数字太大了&apos;); &#125; &#125;, 2000); &#125;); return p; &#125;getNumber().then( function(data)&#123; console.log(&apos;resolved&apos;); console.log(data); &#125;, function(reason, data)&#123; console.log(&apos;rejected&apos;); console.log(reason); &#125;); getNumber函数用来异步获取一个数字，2秒后执行完成，如果数字小于等于5，我们认为是“成功”了，调用resolve修改Promise的状态。否则我们认为是“失败”了，调用reject并传递一个参数，作为失败的原因。 运行getNumber并且在then中传了两个参数，then方法可以接受两个参数，第一个对应resolve的回调，第二个对应reject的回调。所以我们能够分别拿到他们传过来的数据。多次运行这段代码，你会随机得到下面两种结果：12resolved1 或者12reject数字太大了 catch的用法我们知道Promise对象除了then方法，还有一个catch方法，它是做什么用的呢？其实它和then的第二个参数一样，用来指定reject的回调，用法是这样： 123456789getNumber().then(function(data)&#123; console.log(&apos;resolved&apos;); console.log(data);&#125;).catch(function(reason)&#123; console.log(&apos;rejected&apos;); console.log(reason);&#125;); 效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中。请看下面的代码：12345678910getNumber().then(function(data)&#123; console.log(&apos;resolved&apos;); console.log(data); console.log(somedata); //此处的somedata未定义&#125;).catch(function(reason)&#123; console.log(&apos;rejected&apos;); console.log(reason);&#125;); 在resolve的回调中，我们console.log(somedata);而somedata这个变量是没有被定义的。如果我们不用Promise，代码运行到这里就直接在控制台报错了，不往下运行了。但是在这里，会得到这样的结果：1234resolved4rejectedReferenceError: somedata is not defined(...) 也就是说进到catch方法里面去了，而且把错误原因传到了reason参数中。即便是有错误的代码也不会报错了，这与我们的try/catch语句有相同的功能。 总结ES6 Promise的内容还有很多。all, race 的用法，常用的就是这些。all: Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。我们仍旧使用上面定义好的runAsync1、runAsync2、runAsync3这三个函数。race: all方法的效果实际上是「谁跑的慢，以谁为准执行回调」，那么相对的就有另一个方法「谁跑的快，以谁为准执行回调」，这就是race方法，这个词本来就是赛跑的意思。还有一些done、finally、success、fail等，这些并不在Promise标准中，而是我们自己实现的语法糖。 happy hacking!]]></content>
      <categories>
        <category>Js相关</category>
      </categories>
      <tags>
        <tag>promise</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2017%2F12%2F12%2Fmy-first-post%2F</url>
    <content type="text"><![CDATA[前言这是我的第一篇博客，HEXO真的很强大，有很多很多实用的功能，接下来要继续拓展和完善一些功能，Happy Hacking！]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>城市</tag>
      </tags>
  </entry>
</search>
